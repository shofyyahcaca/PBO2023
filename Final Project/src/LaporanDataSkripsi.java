/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package perpustakaan;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author SHOFYYAH
 */
public class LaporanDataSkripsi extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
        private Timer refreshTimer;

    public LaporanDataSkripsi() {
        try {
            dataBuku = new ArrayList<>();
            initComponents();
            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/ProjectUAS", "postgres", "1234");
            tampil();

            // Membuat dan mengatur timer untuk auto-refresh setiap 5 detik (5000 milidetik)
//            refreshTimer = new Timer(5000, new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent e) {
//                    tampil();
//                }
//                });
//                refreshTimer.start();
        } catch (SQLException ex) {
            Logger.getLogger(LaporanDataSkripsi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void peringatan(String pesan) {
        JOptionPane.showMessageDialog(rootPane, pesan);
    }
    ArrayList<DataBuku> dataBuku;

    private void tampil() {
        dataBuku.clear();
            EntityManager entityManager = Persistence.createEntityManagerFactory("UASPU").createEntityManager();
            entityManager.getTransaction().begin();
            TypedQuery<Skripsi> querySelectAll = entityManager.createNamedQuery("Skripsi.findAll", Skripsi.class);
            List<Skripsi> results = querySelectAll.getResultList();
            
                DefaultTableModel model = (DefaultTableModel) jTableDataSkripsi.getModel();
                model.setRowCount(0);
                for (Skripsi data : results) {

                    Object[] baris = new Object[8];
                    baris[0] = data.getId_skripsi();
                    baris[1] = data.getJudul_skripsi();
                    baris[2] = data.getKategori();
                    baris[3] = data.getPenulis();
                    baris[4] = data.getProdi();
                    baris[5] = data.getTahun();
                    baris[6] = data.getPembimbing();
                    baris[7] = data.getJumlah_halaman();
                    
                    model.addRow(baris);
                }
                entityManager.getTransaction().commit();
                entityManager.close();

            }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDataSkripsi = new javax.swing.JTable();
        jLabelwelcomme2 = new javax.swing.JLabel();
        bg = new javax.swing.JLabel();
        jComboBoxKategori = new javax.swing.JComboBox<>();
        jTextFieldSearching = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabelwelcomme1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonCetak = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("PEMINJAMAN");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 430, 110, -1));

        jTableDataSkripsi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Skripsi", "Judul Skripsi", "Kategori", "Penulis", "Prodi", "Tahun", "Pembimbing", "Jumlah Halaman"
            }
        ));
        jTableDataSkripsi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDataSkripsiMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableDataSkripsi);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 320, 760, 390));

        jLabelwelcomme2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabelwelcomme2.setForeground(new java.awt.Color(6, 128, 153));
        jLabelwelcomme2.setText("Laporan Skripsi");
        getContentPane().add(jLabelwelcomme2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 240, 180, -1));

        bg.setIcon(new javax.swing.ImageIcon("C:\\Users\\SHOFYYAH\\Downloads\\1a.png")); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 60));

        jComboBoxKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID Skripsi", "Judul Skripsi", "Kategori", "Penulis", "Prodi", "Tahun", "Pembimbing", "Jumlah Halaman" }));
        jComboBoxKategori.setBorder(null);
        jComboBoxKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxKategoriActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxKategori, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 120, 110, 30));

        jTextFieldSearching.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 107, 153), null));
        jTextFieldSearching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchingActionPerformed(evt);
            }
        });
        jTextFieldSearching.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchingKeyReleased(evt);
            }
        });
        getContentPane().add(jTextFieldSearching, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 120, 200, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("SHORT BY");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 130, 60, -1));

        jLabelwelcomme1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabelwelcomme1.setForeground(new java.awt.Color(6, 128, 153));
        jLabelwelcomme1.setText("SKRIPSI");
        getContentPane().add(jLabelwelcomme1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 20, 140, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("CARI");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, 30, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("DATA BUKU");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 100, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setText("DATA SKRIPSI");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 110, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("LAPORAN DATA BUKU");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 160, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(12, 134, 153));
        jLabel8.setText("LAPORAN DATA SKRIPSI");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 380, 170, 20));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 90));

        jButtonCetak.setBackground(new java.awt.Color(25, 133, 167));
        jButtonCetak.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonCetak.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCetak.setText("CETAK");
        jButtonCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCetakActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCetak, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 250, 90, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\SHOFYYAH\\Downloads\\1ac.png")); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jComboBoxKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxKategoriActionPerformed

    private void jTextFieldSearchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchingActionPerformed

    private void jTextFieldSearchingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchingKeyReleased
        // TODO add your handling code here:
        try {
            String selection = (String) jComboBoxKategori.getSelectedItem();
            String searchTerm = jTextFieldSearching.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT s FROM Skripsi s WHERE ";

            switch (selection) {
                case "ID Skripsi":
                    queryString += "LOWER(s.idSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "Judul Skripsi":
                    queryString += "LOWER(s.judulSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "Penulis":
                    queryString += "LOWER(s.penulis) LIKE LOWER(:searchTerm)";
                    break;
                case "Prodi":
                    queryString += "LOWER(s.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case "Fakultas":
                    queryString += "LOWER(s.fakultas) LIKE LOWER(:searchTerm)";
                    break;
                case "Tahun":
                    queryString += "LOWER(s.tahun) LIKE LOWER(:searchTerm)";
                    break;
                case "Pembimbing":
                    queryString += "LOWER(s.pembimbing) LIKE LOWER(:searchTerm)";
                    break;
                case "Jumlah Halaman":
                    queryString += "LOWER(s.jumlahHalaman) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManager em = null;

            try {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPU");
                em = emf.createEntityManager();

                TypedQuery<Skripsi> query = em.createQuery(queryString, Skripsi.class);
                query.setParameter("searchTerm", "%" + searchTerm + "%");

                List<Skripsi> results = query.getResultList();

                DefaultTableModel dataModel = new DefaultTableModel();

                // Add columns to the model
                dataModel.addColumn("ID Skripsi");
                dataModel.addColumn("Judul Skripsi");
                dataModel.addColumn("Penulis");
                dataModel.addColumn("Prodi");
                dataModel.addColumn("Fakultas");
                dataModel.addColumn("Tahun");
                dataModel.addColumn("Pembimbing");
                dataModel.addColumn("Jumlah Halaman");
                // ... tambahkan kolom lain sesuai kebutuhan

                // Add rows to the model
                for (Skripsi result : results) {
                    Object[] rowData = {
                    result.getId_skripsi(),
                    result.getJudul_skripsi(),
                    result.getKategori(),
                    result.getPenulis(),
                    result.getProdi(),
                    result.getTahun(),
                    result.getPembimbing(),
                    result.getJumlah_halaman(),};
                    dataModel.addRow(rowData);
                }

                // Set jTableBuku with the created model
                jTableDataSkripsi.setModel(dataModel);

            } catch (IllegalArgumentException ex) {
                // Handle the case where no search criteria selected
                ex.printStackTrace();
            } catch (Exception ex) {
                // Handle other exceptions
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_jTextFieldSearchingKeyReleased

    private void jButtonCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCetakActionPerformed
        // TODO add your handling code here:
        try {
            String reportPath = "src/perpustakaan/reportSkripsi.jrxml";
            String selection = (String) jComboBoxKategori.getSelectedItem();
            String searchTerm = jTextFieldSearching.getText().trim();

            // Building the JPA query dynamically based on the selected criteria
            String queryString = "SELECT s FROM Skripsi s WHERE ";

            switch (selection) {
                case "ID Skripsi":
                    queryString += "LOWER(s.idSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "Judul Skripsi":
                    queryString += "LOWER(s.judulSkripsi) LIKE LOWER(:searchTerm)";
                    break;
                case "Kategori":
                    queryString += "LOWER(s.kategori) LIKE LOWER(:searchTerm)";
                    break;
                case "Penulis":
                    queryString += "LOWER(s.penulis) LIKE LOWER(:searchTerm)";
                    break;
                case "Prodi":
                    queryString += "LOWER(s.prodi) LIKE LOWER(:searchTerm)";
                    break;
                case "Tahun":
                    queryString += "LOWER(s.tahun) LIKE LOWER(:searchTerm)";
                    break;
                case "Pembimbing":
                    queryString += "LOWER(s.pembimbing) LIKE LOWER(:searchTerm)";
                    break;
                case "Jumlah Halaman":
                    queryString += "LOWER(s.jumlahHalaman) LIKE LOWER(:searchTerm)";
                    break;
                default:
                    throw new IllegalArgumentException("No search criteria selected.");
            }

            // Create and execute the JPA query
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("UASPU");
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();

            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Skripsi> cq = cb.createQuery (Skripsi.class);
            Root<Skripsi> bok = cq.from(Skripsi.class);
            cq.select(bok);

            // Check if WHERE clause is not empty
            if (queryString.endsWith(" WHERE ")) {
                throw new IllegalArgumentException("No search criteria selected.");
            }

                TypedQuery<Skripsi> q = em.createQuery(cq);
                List<Skripsi> list = q.getResultList();
                Query query = em.createQuery(queryString);
                query.setParameter("searchTerm", "%" + searchTerm + "%");

                List<Skripsi> results = query.getResultList();
                Map<String,Object> parameter = new HashMap<>();
                parameter.put("querySearch", searchTerm);
                parameter.put("searchBy",selection);

                // Menyiapkan data untuk laporan
                List<Object[]> data = new ArrayList<>();
                for (Skripsi result : results) {
                    Object[] rowData = {
                        result.getId_skripsi(),
                        result.getJudul_skripsi(),
                        result.getKategori(),
                        result.getPenulis(),
                        result.getProdi(),
                        result.getTahun(),
                        result.getPembimbing(),
                        result.getJumlah_halaman(),};
                    data.add(rowData);
                }
                em.getTransaction().commit();
                em.close();
                emf.close();

            // Membuat sumber data untuk JasperReports dari data hasil pencarian

            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(results);

            // Memuat file desain laporan (*.jrxml)
            JasperReport jasperReport = JasperCompileManager.compileReport(reportPath);
                JasperPrint print = JasperFillManager.fillReport(jasperReport, parameter, dataSource);
                JasperViewer viewer = new JasperViewer(print, false);
                viewer.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(InputSkripsi.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jButtonCetakActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        new InputBuku().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        new LaporanDataSkripsi().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        new PeminjamanBuku().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        new LaporanDataBuku().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
        new LaporanDataSkripsi().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jTableDataSkripsiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDataSkripsiMouseClicked
        // TODO add your handling code here:
//        int baris = jTableDataSkripsi.rowAtPoint(evt.getPoint());
//
//        String Id_Skripsi = jTableDataSkripsi.getValueAt(baris, 0).toString();
//        jTextFieldIDSkripsi.setText(Id_Skripsi);
//
//        String Judul_Skripsi = jTableDataSkripsi.getValueAt(baris, 1).toString();
//        jTextFieldJudulSkripsi.setText(Judul_Skripsi);
//
//        String Kategori = jTableDataSkripsi.getValueAt(baris, 2).toString();
//        jTextFieldKategori.setText(Kategori);
//
//        String Penulis = jTableDataSkripsi.getValueAt(baris, 3).toString();
//        jTextFieldPenulis.setText(Penulis);
//
//        String Prodi = jTableDataSkripsi.getValueAt(baris, 4).toString();
//        jTextFieldProdi.setText(Prodi);
//
//        String Tahun = jTableDataSkripsi.getValueAt(baris, 5).toString();
//        jTextFieldTahun.setText(Tahun);
//
//        String Pembimbing = jTableDataSkripsi.getValueAt(baris, 6).toString();
//        jTextFieldPembimbing.setText(Pembimbing);
//
//        String JumlahHalaman = jTableDataSkripsi.getValueAt(baris, 7).toString();
//        jTextFieldJumlahHalaman.setText(JumlahHalaman);
    }//GEN-LAST:event_jTableDataSkripsiMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaporanDataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaporanDataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaporanDataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaporanDataSkripsi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LaporanDataSkripsi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JButton jButtonCetak;
    private javax.swing.JComboBox<String> jComboBoxKategori;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelwelcomme1;
    private javax.swing.JLabel jLabelwelcomme2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableDataSkripsi;
    private javax.swing.JTextField jTextFieldSearching;
    // End of variables declaration//GEN-END:variables
}